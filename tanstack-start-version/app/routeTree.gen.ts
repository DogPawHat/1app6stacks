/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ResultsImport } from './routes/results'
import { Route as BattleImport } from './routes/battle'
import { Route as IndexImport } from './routes/index'
import { Route as TurboIndexImport } from './routes/turbo.index'
import { Route as TurboBattleImport } from './routes/turbo.battle'
import { Route as BattleRedRedDexIdBlueBlueDexIdImport } from './routes/battle.red.$redDexId.blue.$blueDexId'
import { Route as TurboBattleRedRedDexIdBlueBlueDexIdImport } from './routes/turbo.battle.red.$redDexId.blue.$blueDexId'

// Create/Update Routes

const ResultsRoute = ResultsImport.update({
  id: '/results',
  path: '/results',
  getParentRoute: () => rootRoute,
} as any)

const BattleRoute = BattleImport.update({
  id: '/battle',
  path: '/battle',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TurboIndexRoute = TurboIndexImport.update({
  id: '/turbo/',
  path: '/turbo/',
  getParentRoute: () => rootRoute,
} as any)

const TurboBattleRoute = TurboBattleImport.update({
  id: '/turbo/battle',
  path: '/turbo/battle',
  getParentRoute: () => rootRoute,
} as any)

const BattleRedRedDexIdBlueBlueDexIdRoute =
  BattleRedRedDexIdBlueBlueDexIdImport.update({
    id: '/red/$redDexId/blue/$blueDexId',
    path: '/red/$redDexId/blue/$blueDexId',
    getParentRoute: () => BattleRoute,
  } as any)

const TurboBattleRedRedDexIdBlueBlueDexIdRoute =
  TurboBattleRedRedDexIdBlueBlueDexIdImport.update({
    id: '/red/$redDexId/blue/$blueDexId',
    path: '/red/$redDexId/blue/$blueDexId',
    getParentRoute: () => TurboBattleRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/battle': {
      id: '/battle'
      path: '/battle'
      fullPath: '/battle'
      preLoaderRoute: typeof BattleImport
      parentRoute: typeof rootRoute
    }
    '/results': {
      id: '/results'
      path: '/results'
      fullPath: '/results'
      preLoaderRoute: typeof ResultsImport
      parentRoute: typeof rootRoute
    }
    '/turbo/battle': {
      id: '/turbo/battle'
      path: '/turbo/battle'
      fullPath: '/turbo/battle'
      preLoaderRoute: typeof TurboBattleImport
      parentRoute: typeof rootRoute
    }
    '/turbo/': {
      id: '/turbo/'
      path: '/turbo'
      fullPath: '/turbo'
      preLoaderRoute: typeof TurboIndexImport
      parentRoute: typeof rootRoute
    }
    '/battle/red/$redDexId/blue/$blueDexId': {
      id: '/battle/red/$redDexId/blue/$blueDexId'
      path: '/red/$redDexId/blue/$blueDexId'
      fullPath: '/battle/red/$redDexId/blue/$blueDexId'
      preLoaderRoute: typeof BattleRedRedDexIdBlueBlueDexIdImport
      parentRoute: typeof BattleImport
    }
    '/turbo/battle/red/$redDexId/blue/$blueDexId': {
      id: '/turbo/battle/red/$redDexId/blue/$blueDexId'
      path: '/red/$redDexId/blue/$blueDexId'
      fullPath: '/turbo/battle/red/$redDexId/blue/$blueDexId'
      preLoaderRoute: typeof TurboBattleRedRedDexIdBlueBlueDexIdImport
      parentRoute: typeof TurboBattleImport
    }
  }
}

// Create and export the route tree

interface BattleRouteChildren {
  BattleRedRedDexIdBlueBlueDexIdRoute: typeof BattleRedRedDexIdBlueBlueDexIdRoute
}

const BattleRouteChildren: BattleRouteChildren = {
  BattleRedRedDexIdBlueBlueDexIdRoute: BattleRedRedDexIdBlueBlueDexIdRoute,
}

const BattleRouteWithChildren =
  BattleRoute._addFileChildren(BattleRouteChildren)

interface TurboBattleRouteChildren {
  TurboBattleRedRedDexIdBlueBlueDexIdRoute: typeof TurboBattleRedRedDexIdBlueBlueDexIdRoute
}

const TurboBattleRouteChildren: TurboBattleRouteChildren = {
  TurboBattleRedRedDexIdBlueBlueDexIdRoute:
    TurboBattleRedRedDexIdBlueBlueDexIdRoute,
}

const TurboBattleRouteWithChildren = TurboBattleRoute._addFileChildren(
  TurboBattleRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/battle': typeof BattleRouteWithChildren
  '/results': typeof ResultsRoute
  '/turbo/battle': typeof TurboBattleRouteWithChildren
  '/turbo': typeof TurboIndexRoute
  '/battle/red/$redDexId/blue/$blueDexId': typeof BattleRedRedDexIdBlueBlueDexIdRoute
  '/turbo/battle/red/$redDexId/blue/$blueDexId': typeof TurboBattleRedRedDexIdBlueBlueDexIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/battle': typeof BattleRouteWithChildren
  '/results': typeof ResultsRoute
  '/turbo/battle': typeof TurboBattleRouteWithChildren
  '/turbo': typeof TurboIndexRoute
  '/battle/red/$redDexId/blue/$blueDexId': typeof BattleRedRedDexIdBlueBlueDexIdRoute
  '/turbo/battle/red/$redDexId/blue/$blueDexId': typeof TurboBattleRedRedDexIdBlueBlueDexIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/battle': typeof BattleRouteWithChildren
  '/results': typeof ResultsRoute
  '/turbo/battle': typeof TurboBattleRouteWithChildren
  '/turbo/': typeof TurboIndexRoute
  '/battle/red/$redDexId/blue/$blueDexId': typeof BattleRedRedDexIdBlueBlueDexIdRoute
  '/turbo/battle/red/$redDexId/blue/$blueDexId': typeof TurboBattleRedRedDexIdBlueBlueDexIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/battle'
    | '/results'
    | '/turbo/battle'
    | '/turbo'
    | '/battle/red/$redDexId/blue/$blueDexId'
    | '/turbo/battle/red/$redDexId/blue/$blueDexId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/battle'
    | '/results'
    | '/turbo/battle'
    | '/turbo'
    | '/battle/red/$redDexId/blue/$blueDexId'
    | '/turbo/battle/red/$redDexId/blue/$blueDexId'
  id:
    | '__root__'
    | '/'
    | '/battle'
    | '/results'
    | '/turbo/battle'
    | '/turbo/'
    | '/battle/red/$redDexId/blue/$blueDexId'
    | '/turbo/battle/red/$redDexId/blue/$blueDexId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BattleRoute: typeof BattleRouteWithChildren
  ResultsRoute: typeof ResultsRoute
  TurboBattleRoute: typeof TurboBattleRouteWithChildren
  TurboIndexRoute: typeof TurboIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BattleRoute: BattleRouteWithChildren,
  ResultsRoute: ResultsRoute,
  TurboBattleRoute: TurboBattleRouteWithChildren,
  TurboIndexRoute: TurboIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/battle",
        "/results",
        "/turbo/battle",
        "/turbo/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/battle": {
      "filePath": "battle.tsx",
      "children": [
        "/battle/red/$redDexId/blue/$blueDexId"
      ]
    },
    "/results": {
      "filePath": "results.tsx"
    },
    "/turbo/battle": {
      "filePath": "turbo.battle.tsx",
      "children": [
        "/turbo/battle/red/$redDexId/blue/$blueDexId"
      ]
    },
    "/turbo/": {
      "filePath": "turbo.index.tsx"
    },
    "/battle/red/$redDexId/blue/$blueDexId": {
      "filePath": "battle.red.$redDexId.blue.$blueDexId.tsx",
      "parent": "/battle"
    },
    "/turbo/battle/red/$redDexId/blue/$blueDexId": {
      "filePath": "turbo.battle.red.$redDexId.blue.$blueDexId.tsx",
      "parent": "/turbo/battle"
    }
  }
}
ROUTE_MANIFEST_END */
