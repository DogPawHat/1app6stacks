/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TurboImport } from './routes/turbo'
import { Route as ResultsImport } from './routes/results'
import { Route as IndexImport } from './routes/index'
import { Route as TurboIndexImport } from './routes/turbo.index'
import { Route as TurboRedRedDexIdBlueBlueDexIdImport } from './routes/turbo.red.$redDexId.blue.$blueDexId'

// Create/Update Routes

const TurboRoute = TurboImport.update({
  id: '/turbo',
  path: '/turbo',
  getParentRoute: () => rootRoute,
} as any)

const ResultsRoute = ResultsImport.update({
  id: '/results',
  path: '/results',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TurboIndexRoute = TurboIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => TurboRoute,
} as any)

const TurboRedRedDexIdBlueBlueDexIdRoute =
  TurboRedRedDexIdBlueBlueDexIdImport.update({
    id: '/red/$redDexId/blue/$blueDexId',
    path: '/red/$redDexId/blue/$blueDexId',
    getParentRoute: () => TurboRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/results': {
      id: '/results'
      path: '/results'
      fullPath: '/results'
      preLoaderRoute: typeof ResultsImport
      parentRoute: typeof rootRoute
    }
    '/turbo': {
      id: '/turbo'
      path: '/turbo'
      fullPath: '/turbo'
      preLoaderRoute: typeof TurboImport
      parentRoute: typeof rootRoute
    }
    '/turbo/': {
      id: '/turbo/'
      path: '/'
      fullPath: '/turbo/'
      preLoaderRoute: typeof TurboIndexImport
      parentRoute: typeof TurboImport
    }
    '/turbo/red/$redDexId/blue/$blueDexId': {
      id: '/turbo/red/$redDexId/blue/$blueDexId'
      path: '/red/$redDexId/blue/$blueDexId'
      fullPath: '/turbo/red/$redDexId/blue/$blueDexId'
      preLoaderRoute: typeof TurboRedRedDexIdBlueBlueDexIdImport
      parentRoute: typeof TurboImport
    }
  }
}

// Create and export the route tree

interface TurboRouteChildren {
  TurboIndexRoute: typeof TurboIndexRoute
  TurboRedRedDexIdBlueBlueDexIdRoute: typeof TurboRedRedDexIdBlueBlueDexIdRoute
}

const TurboRouteChildren: TurboRouteChildren = {
  TurboIndexRoute: TurboIndexRoute,
  TurboRedRedDexIdBlueBlueDexIdRoute: TurboRedRedDexIdBlueBlueDexIdRoute,
}

const TurboRouteWithChildren = TurboRoute._addFileChildren(TurboRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/results': typeof ResultsRoute
  '/turbo': typeof TurboRouteWithChildren
  '/turbo/': typeof TurboIndexRoute
  '/turbo/red/$redDexId/blue/$blueDexId': typeof TurboRedRedDexIdBlueBlueDexIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/results': typeof ResultsRoute
  '/turbo': typeof TurboIndexRoute
  '/turbo/red/$redDexId/blue/$blueDexId': typeof TurboRedRedDexIdBlueBlueDexIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/results': typeof ResultsRoute
  '/turbo': typeof TurboRouteWithChildren
  '/turbo/': typeof TurboIndexRoute
  '/turbo/red/$redDexId/blue/$blueDexId': typeof TurboRedRedDexIdBlueBlueDexIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/results'
    | '/turbo'
    | '/turbo/'
    | '/turbo/red/$redDexId/blue/$blueDexId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/results' | '/turbo' | '/turbo/red/$redDexId/blue/$blueDexId'
  id:
    | '__root__'
    | '/'
    | '/results'
    | '/turbo'
    | '/turbo/'
    | '/turbo/red/$redDexId/blue/$blueDexId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ResultsRoute: typeof ResultsRoute
  TurboRoute: typeof TurboRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ResultsRoute: ResultsRoute,
  TurboRoute: TurboRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/results",
        "/turbo"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/results": {
      "filePath": "results.tsx"
    },
    "/turbo": {
      "filePath": "turbo.tsx",
      "children": [
        "/turbo/",
        "/turbo/red/$redDexId/blue/$blueDexId"
      ]
    },
    "/turbo/": {
      "filePath": "turbo.index.tsx",
      "parent": "/turbo"
    },
    "/turbo/red/$redDexId/blue/$blueDexId": {
      "filePath": "turbo.red.$redDexId.blue.$blueDexId.tsx",
      "parent": "/turbo"
    }
  }
}
ROUTE_MANIFEST_END */
